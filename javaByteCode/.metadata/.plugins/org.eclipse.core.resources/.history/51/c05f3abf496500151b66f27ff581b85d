package jCompiler;

import java.awt.List;
import java.util.ArrayList;

/* 		OBJECT-ORIENTED RECOGNIZER FOR SIMPLE EXPRESSIONS
expr    -> term   (+ | -) expr | term
term    -> factor (* | /) term | factor
factor  -> int_lit | '(' expr ')'     
*/


public class Parser {
	public static void main(String[] args) {
		System.out.println("Enter an expression, end with semi-colon!\n");
		Lexer.lex();
		new Assign();
		Code.output();
	}
}

/*

class Program {
	 Decls d;
	 Stmt s;
	 char op;
	 
	 public Program(){
		 d = new Decls();
		 s= new Stmt;
		 if (Lexer.nextToken == Token.KEY_END){
			 Code.gen("return");
		 }
	 }	 
}

class Decls { 
	char ch;
	
	if(Lexer.nextToken == Token.KEY_INT) {
		ch = buffer.getChar();
		while ( ch !=  )
	}
}*/

class Assign    { //assign -> id = expr
	Expr e;
	char i;
	char op;
	
	
	public Assign()  {
		
		if (Lexer.nextChar == Token.ID) {
			i = Lexer.nextChar;
			Lexer.lex();
		}
		if (Lexer.nextToken == Token.ASSIGN_OP)  {
			op = Lexer.nextChar;
			Lexer.lex();
			e = new Expr();
			Code.gen(Code.assigncode(i));
		}	
	}	
}

class Rexp	{ // rexp -> expr ('<' | '>' | '==' | '!=') expr
	Expr e;
	char op;
	String opString;
	
	public Rexp() {
		e=new Expr();
		if (Lexer.nextToken == Token.GREATER_OP || Lexer.nextToken == Token.LESSER_OP ) {
			op = Lexer.nextChar;
			Lexer.lex();
			e = new Expr();
			Code.gen(Code.opcode(op));
		}
		if (Lexer.nextToken == Token.EQ_OP || Lexer.nextToken == Token.NOT_EQ) {
			if(Lexer.nextToken == Token.EQ_OP)
			{
				opString = "==";
			}
			if(Lexer.nextToken == Token.EQ_OP)
			{
				opString = "!=";
			}
			Lexer.lex();
			e = new Expr();
			Code.gen(Code.opcode(opString));
		}
	}
	
}


class Expr   { // expr -> term (+ | -) expr | term
	Term t;
	Expr e;
	char op;

	public Expr() {
		t = new Term();
		if (Lexer.nextToken == Token.ADD_OP || Lexer.nextToken == Token.SUB_OP) {
			op = Lexer.nextChar;
			Lexer.lex();
			e = new Expr();
			Code.gen(Code.opcode(op));	 
		}
	}
}

class Term    { // term -> factor (* | /) term | factor
	Factor f;
	Term t;
	char op;

	public Term() {
		f = new Factor();
		if (Lexer.nextToken == Token.MULT_OP || Lexer.nextToken == Token.DIV_OP) {
			op = Lexer.nextChar;
			Lexer.lex();
			t = new Term();
			Code.gen(Code.opcode(op));
			}
	}
}

class Factor { // factor -> number | '(' expr ')'
	Expr e;
	int i;

	public Factor() {
		switch (Lexer.nextToken) {
		case Token.ID:
			char ch = Lexer.nextChar;
			i = Code.variable.indexOf(ch);
			Code.gen(Code.loadcode(i));
		case Token.INT_LIT: // number
			i = Lexer.intValue;
			Code.gen(Code.intcode(i));
			Lexer.lex();
			break;
		case Token.LEFT_PAREN: // '('
			Lexer.lex();
			e = new Expr();
			Lexer.lex(); // skip over ')'
			break;
		default:
			break;
		}
	}
}


class Code {
	public static ArrayList<Character> variable = new ArrayList<Character>();
	static String[] code = new String[100];
	static int codeptr = 0;
	
	
	public static void gen(String s) {
		code[codeptr] = s;
		codeptr++;
	}
	
	public static String loadcode(int i) {
		return "iload_" + i;
	}
	
	public static String intcode(int i) {
		if (i > 127) return "sipush " + i;
		if (i > 5) return "bipush " + i;
		return "iconst_" + i;
	}
	
	public static String assigncode(char i){
		variable.add(i);
		return "istore_" + (variable.indexOf(i)+1);
	}
	
	public static String opcode(String opString){
		if (opString == "==" || opString == "!=")
			return "icmpeq";
		else
			return opString;
	}
	
	public static String opcode(char op) {
		switch(op) {
		case '=' : return "istore ";
		case '+' : return "iadd";
		case '-' : return "isub";
		case '*' : return "imul";
		case '/' : return "idiv";
		default: return "";
		}
	}
	
	public static void output() {
		for (int i=0; i<codeptr; i++)
			System.out.println(code[i]);
	}
}


