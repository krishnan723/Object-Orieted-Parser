package jCompiler;

import java.awt.List;
import java.util.ArrayList;

/* 		OBJECT-ORIENTED RECOGNIZER FOR SIMPLE EXPRESSIONS
expr    -> term   (+ | -) expr | term
term    -> factor (* | /) term | factor
factor  -> int_lit | '(' expr ')'     
*/


public class Parser {
	public static void main(String[] args) {
		System.out.println("Enter an expression, end with 'end'\n");
		Lexer.lex();
		new Program();
		Code.output();
	}
}


class Program {  //Program -> decls stmts end
	 Decls d;
	 Stmts s;
	 char op;
	 
	 public Program(){
		 if(Lexer.nextToken == Token.KEY_INT){
			 d = new Decls();
		 }
		 if(Lexer.nextToken == Token.ID || Lexer.nextToken == Token.KEY_IF || Lexer.nextToken == Token.KEY_FOR) {
			 s= new Stmts();
		 }
		 if (Lexer.nextToken == Token.KEY_END){
			 Code.gen("return");
		 }
	 }	 
}

class Decls { // decls -> int idlist ';'
	IdList il;
	
	public Decls() {
		il = new IdList();
		Lexer.lex();
	}
}

class IdList { // idList -> id [',' idList] 
	public static ArrayList<Character> variable = new ArrayList<Character>();
	IdList idl;
	
	public IdList(){
		if(Lexer.nextToken == Token.ID){
			variable.add(Lexer.nextChar);
			Lexer.lex();
		}
		if(Lexer.nextToken == Token.COMMA){
			idl = new IdList();
			Lexer.lex();
		}
	}
}

class Stmts  { //stmts -> stmt stmts
	Stmt s;
	Stmts n;
	
	public Stmts() {
		s = new Stmt();
		if(Lexer.nextToken == Token.ID || Lexer.nextToken == Token.KEY_IF || Lexer.nextToken == Token.KEY_FOR || Lexer.nextToken == Token.LEFT_BRACE ) {
			n = new Stmts();
		}
	}
}

class Stmt { //stmt -> assign ';'| cmpd | cond | loop
	Assign a;
	Cmpd c;
	Cond d;
	Loop l;
	char op;
	
	public Stmt() {
			switch(Lexer.nextToken) {
			case Token.ID: // assign
				a = new Assign();
				Lexer.nextToken = Token.SEMICOLON;
				Lexer.lex();
				break;
		    case Token.LEFT_BRACE: // '{'
		    	c = new Cmpd();
		    	Lexer.lex(); // skip over '}'
		    	break;
		    case Token.KEY_IF:
		    	Lexer.lex();
		    	d = new Cond();
		    	Lexer.lex();
		    	break;
		    case Token.KEY_FOR:
		    	Lexer.lex();
		    	l = new Loop();
		    	Lexer.lex();
		    default:
		    	break;
		}
		
	}
}

class Cmpd  { // cmpd->{ stmts }
	Stmts s;
	
	public Cmpd() {
			Lexer.lex();
			s = new Stmts();
		}
	}

class Cond  { //cond -> if '(' rexp ')' stmt [ else stmt ]
	Rexpr r;
	Stmt s;

	public Cond() {
		if( Lexer.nextToken == Token.LEFT_PAREN) {
			Lexer.lex();
			r = new Rexpr();
			Lexer.lex(); // skip over ')'
			s = new Stmt();
			Lexer.nextToken = Token.KEY_ELSE;
			s = new Stmt();
			
	}
	}
}

class Loop{ //loop -> for '(' [assign] ';' [rexp] ';' [assign] ')' stmt
	Assign a;
	Rexpr r;
	Stmt s;
	
	public Loop()  {
		if (Lexer.nextToken == Token.KEY_FOR)  {
			if( Lexer.nextToken == Token.LEFT_PAREN) {
				Lexer.lex();
				if (Lexer.nextToken == Token.ID)
					a = new Assign();
				if (Lexer.nextToken == Token.SEMICOLON)
					Lexer.lex();
				r = new Rexpr();
				if (Lexer.nextToken == Token.SEMICOLON)
					Lexer.lex();
				if (Lexer.nextToken == Token.ID)
					a= new Assign();
				Lexer.lex(); // skip over ')'
				s = new Stmt();
		}
	}
	}
}


class Rexpr{ // rexpr-> expr ('<' | '>' | '==' | '!= ') expr
	Expr e;
	int op;
	
	public Rexpr() {
		e = new Expr();
		if (Lexer.nextToken == Token.LESSER_OP || Lexer.nextToken == Token.GREATER_OP || Lexer.nextToken == Token.EQ_OP || Lexer.nextToken == Token.NOT_EQ)  {
			op = Lexer.nextToken;
			Lexer.lex();
			e = new Expr();
			Code.gen(Code.opcode(op));
		}
			
		
	}
}


class Assign    { //assign -> id = expr i=0
	Expr e;
	char i;
	char op;
	
	
	public Assign()  {
		
		if (Lexer.nextToken == Token.ID) {
			i = Lexer.nextChar;
			Lexer.lex();
		}
		if (Lexer.nextToken == Token.ASSIGN_OP)  {
			op = Lexer.nextChar;
			Lexer.lex();
			e = new Expr();
			Code.gen(Code.assigncode(i));
		}	
	}	
}


class Expr   { // expr -> term (+ | -) expr | term
	Term t;
	Expr e;
	char op;

	public Expr() {
		t = new Term();
		if (Lexer.nextToken == Token.ADD_OP || Lexer.nextToken == Token.SUB_OP) {
			op = Lexer.nextChar;
			Lexer.lex();
			e = new Expr();
			Code.gen(Code.opcode(op));
		}
	}
}

class Term    { // term -> factor (* | /) term | factor
	Factor f;
	Term t;
	char op;

	public Term() {
		f = new Factor();
		if (Lexer.nextToken == Token.MULT_OP || Lexer.nextToken == Token.DIV_OP) {
			op = Lexer.nextChar;
			Lexer.lex();
			t = new Term();
			Code.gen(Code.opcode(op));
			}
	}
}

class Factor { // factor -> number | '(' expr ')'
	Expr e;
	int i;

	public Factor() {
		switch (Lexer.nextToken) {
		case Token.ID:
			char ch = Lexer.nextChar;
			i = IdList.variable.indexOf(ch);
			Code.gen(Code.loadcode(i));
		case Token.INT_LIT: // number
			i = Lexer.intValue;
			Code.gen(Code.intcode(i));
			Lexer.lex();
			break;
		case Token.LEFT_PAREN: // '('
			Lexer.lex();
			e = new Expr();
			Lexer.lex(); // skip over ')'
			break;
		default:
			break;
		}
	}
}


class Code {
	static String[] code = new String[100];
	static int codeptr = 0;
	
	
	public static void gen(String s) {
		code[codeptr] = s;
		codeptr++;
	}
	
	public static String loadcode(int i) {
		return "iload_" + i;
	}
	
	public static String intcode(int i) {
		if (i > 127) return "sipush " + i;
		if (i > 5) return "bipush " + i;
		return "iconst_" + i;
	}
	
	public static String assigncode(char i){
		return "istore_" + (IdList.variable.indexOf(i)+1);
	}
	
	public static String opcode(int op){
		switch(op){
		case Token.EQ_OP : return "if_icmpne";
		case Token.NOT_EQ : return "if_icmpeq";
		case Token.LESSER_OP : return "if_icmpge";
		case Token.GREATER_OP : return "if_icmple";
		default : return "";
		}
	}
	
	public static String opcode(char op) {
		switch(op) {
		case '+' : return "iadd";
		case '-' : return "isub";
		case '*' : return "imul";
		case '/' : return "idiv";
		default: return "";
		}
	}
	
	public static void output() {
		for (int i=0; i<codeptr; i++)
			System.out.println(code[i]);
	}
}


